{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { FlatList, TextInput } from 'react-native-gesture-handler';\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport { UIHeader } from \"../../components\";\nimport { colors } from \"../../constants\";\nimport MessengerItem from \"./MessengerItem\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { firebaseDatabase, firebaseDatabaseRef, firebaseSet, onValue } from \"../../firebase/firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Messenger = function Messenger(props) {\n  var _props$route$params$u = props.route.params.user,\n      url = _props$route$params$u.url,\n      name = _props$route$params$u.name;\n  var navigation = props.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      typedText = _useState2[0],\n      setTypedText = _useState2[1];\n\n  var _useState3 = useState([{}]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chatHistory = _useState4[0],\n      setChatHistory = _useState4[1];\n\n  useEffect(function () {\n    onValue(firebaseDatabaseRef(firebaseDatabase, 'chats'), function _callee(snapshot) {\n      var snapshotObject, stringUser, myUserId, updatedChatHistory, i, item;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!snapshot.exists()) {\n                _context.next = 10;\n                break;\n              }\n\n              snapshotObject = snapshot.val();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n            case 4:\n              stringUser = _context.sent;\n              myUserId = JSON.parse(stringUser).userId;\n              updatedChatHistory = Object.keys(snapshotObject).filter(function (item) {\n                return item.includes(myUserId);\n              }).map(function (eachKey) {\n                return _objectSpread(_objectSpread({}, snapshotObject[eachKey]), {}, {\n                  isSender: eachKey.split('-')[0] == myUserId\n                });\n              }).sort(function (item1, item2) {\n                return item1.timestamp - item2.timestamp;\n              });\n\n              for (i = 0; i < updatedChatHistory.length; +i, _readOnlyError(\"i\")) {\n                item = updatedChatHistory[i];\n                item.showUrl = i == 0 ? true : item.isSender != updatedChatHistory[i].isSender;\n                updatedChatHistory[i] = item;\n              }\n\n              setChatHistory(updatedChatHistory);\n              debugger;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'column',\n      flex: 1\n    },\n    children: [_jsx(UIHeader, {\n      title: name,\n      lefIconName: 'arrow-left',\n      rightIconName: 'ellipsis-v',\n      onPressLeftIcon: function onPressLeftIcon() {\n        navigation.goBack();\n      },\n      onPressRightIcon: function onPressRightIcon() {\n        return alert('right icon');\n      }\n    }), _jsx(FlatList, {\n      style: {\n        flex: 1\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.messenger;\n      },\n      data: chatHistory,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsx(MessengerItem, {\n          item: item,\n          onPress: function onPress() {\n            return alert(\"234\");\n          }\n        }, \"\" + item.timestamp);\n      }\n    }), _jsxs(View, {\n      style: {\n        height: 50,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        borderTopWidth: 1,\n        borderTopColor: '#ccc',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [_jsx(TextInput, {\n        value: typedText,\n        onChangeText: function onChangeText(text) {\n          setTypedText(text);\n        },\n        placeholder: \"Enter your message here\",\n        placeholderTextColor: colors.placeholder,\n        style: {\n          height: 50,\n          paddingStart: 10,\n          color: 'black',\n          flex: 1\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function _callee2() {\n          var stringUser, myUserId, myFriendUserId, newMessengerObject;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(typedText.trim().length == 0)) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 2:\n                  _context2.next = 4;\n                  return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n                case 4:\n                  stringUser = _context2.sent;\n                  myUserId = JSON.parse(stringUser).userId;\n                  myFriendUserId = props.route.params.user.userId;\n                  newMessengerObject = {\n                    url: 'https://randomuser.me/api/portraits/men/50.jpg',\n                    showUrl: false,\n                    messenger: typedText,\n                    timestamp: new Date().getTime()\n                  };\n                  Keyboard.dismiss();\n                  firebaseSet(firebaseDatabaseRef(firebaseDatabase, \"chats/\" + myUserId + \"-\" + myFriendUserId + \"-\" + newMessengerObject.timestamp), newMessengerObject).then(function () {\n                    setTypedText('');\n                  });\n\n                case 10:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        },\n        children: _jsx(Icon, {\n          name: \"paper-plane\",\n          size: 20,\n          color: colors.primary,\n          style: {\n            padding: 10\n          }\n        })\n      })]\n    })]\n  });\n};\n\nexport default Messenger;","map":{"version":3,"names":["React","useEffect","useState","FlatList","TextInput","Icon","UIHeader","colors","MessengerItem","AsyncStorage","firebaseDatabase","firebaseDatabaseRef","firebaseSet","onValue","Messenger","props","route","params","user","url","name","navigation","typedText","setTypedText","chatHistory","setChatHistory","snapshot","exists","snapshotObject","val","getItem","stringUser","myUserId","JSON","parse","userId","updatedChatHistory","Object","keys","filter","item","includes","map","eachKey","isSender","split","sort","item1","item2","timestamp","i","length","showUrl","flexDirection","flex","goBack","alert","messenger","index","height","position","bottom","left","right","borderTopWidth","borderTopColor","justifyContent","alignItems","text","placeholder","paddingStart","color","trim","myFriendUserId","newMessengerObject","Date","getTime","Keyboard","dismiss","then","primary","padding"],"sources":["D:/React/react-native-project/training-app/screens/Messenger/Messeger.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    Text,\n    View,\n    Image,\n    Dimensions,\n    TouchableOpacity,\n    Keyboard\n} from \"react-native\";\nimport { FlatList, TextInput } from 'react-native-gesture-handler';\nimport Icon from 'react-native-vector-icons/FontAwesome5';\nimport { SafeAreaView } from 'react-navigation';\nimport { UIHeader } from '../../components';\nimport { colors, fontSizes } from '../../constants';\nimport MessengerItem from './MessengerItem';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {\n    auth,\n    firebaseDatabase,\n    onAuthStateChanged,\n    firebaseDatabaseRef,\n    firebaseSet,\n    onValue\n} from '../../firebase/firebase'\n\nconst Messenger = (props: any) => {\n    const { url, name } = props.route.params.user;\n    const { navigation } = props;\n    const [typedText, setTypedText] = useState('');\n    const [chatHistory, setChatHistory] = useState([\n        {\n            // url: 'https://randomuser.me/api/portraits/men/70.jpg',\n            // showUrl: true,\n            // isSender: true,\n            // messenger: \"Hello\",\n            // timestamp: 1641654238000,\n        }\n    ]);\n\n    useEffect(() => {\n        onValue(firebaseDatabaseRef(firebaseDatabase, 'chats'), async (snapshot) => {\n            // debugger\n            if (snapshot.exists()) {\n                let snapshotObject = snapshot.val();\n                let stringUser = await AsyncStorage.getItem('user');\n                let myUserId = JSON.parse(stringUser).userId;\n                // debugger\n                let updatedChatHistory = Object.keys(snapshotObject).filter(item => item.includes(myUserId))\n                    .map(eachKey => {\n                        // debugger\n                        return {\n                            ...snapshotObject[eachKey],\n                            isSender: eachKey.split('-')[0] == myUserId\n                        }\n                    }).sort((item1, item2) => item1.timestamp - item2.timestamp);\n\n                for (const i = 0; i < updatedChatHistory.length; i++) {\n                    let item = updatedChatHistory[i];\n                    item.showUrl = (i == 0) ? true : item.isSender != updatedChatHistory[i].isSender\n                    updatedChatHistory[i] = item\n\n                }\n                setChatHistory(updatedChatHistory);\n                debugger\n            }\n        })\n    }, [])\n\n    return (\n        <View\n            style={{\n                flexDirection: 'column',\n                flex: 1\n            }}\n        >\n            <UIHeader\n                title={name}\n                lefIconName={'arrow-left'}\n                rightIconName={'ellipsis-v'}\n                onPressLeftIcon={() => {\n                    navigation.goBack();\n                }}\n                onPressRightIcon={() => {\n                    return alert('right icon');\n                }}\n            />\n            <FlatList\n                style={{\n                    flex: 1\n                }}\n                keyExtractor={(item,) => item.messenger}\n                data={chatHistory}\n                renderItem={({ item, index }) =>\n                    <MessengerItem\n                        key={`${item.timestamp}`}\n                        item={item}\n                        onPress={() => alert(\"234\")}\n                    />}\n            />\n            <View style={{\n                height: 50,\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                borderTopWidth: 1,\n                borderTopColor: '#ccc',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                alignItems: 'center'\n            }}>\n                <TextInput\n                    value={typedText}\n                    onChangeText={(text) => {\n                        setTypedText(text)\n                    }}\n                    placeholder='Enter your message here'\n                    placeholderTextColor={colors.placeholder}\n                    style={{\n                        height: 50,\n                        paddingStart: 10,\n                        color: 'black',\n                        flex: 1\n                    }}\n                />\n                <TouchableOpacity\n                    onPress={async () => {\n                        if (typedText.trim().length == 0) {\n                            return\n                        }\n\n                        let stringUser = await AsyncStorage.getItem(\"user\")\n                        let myUserId = JSON.parse(stringUser).userId\n                        let myFriendUserId = props.route.params.user.userId\n                        //save to Firebase DB\n                        let newMessengerObject = {\n                            //fake\n                            url: 'https://randomuser.me/api/portraits/men/50.jpg',\n                            showUrl: false,\n                            messenger: typedText,\n                            timestamp: (new Date()).getTime(),\n                        }\n                        Keyboard.dismiss()\n                        firebaseSet(firebaseDatabaseRef(\n                            firebaseDatabase,\n                            `chats/${myUserId}-${myFriendUserId}-${newMessengerObject.timestamp}`\n                        ), newMessengerObject).then(() => {\n                            setTypedText('')\n                        })\n                    }}\n                >\n                    <Icon name='paper-plane' size={20} color={colors.primary} style={{\n                        padding: 10\n                    }} />\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default Messenger"],"mappings":"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"},"metadata":{},"sourceType":"module"}